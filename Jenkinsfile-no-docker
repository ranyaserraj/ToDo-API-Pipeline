pipeline {
    agent any
    
    environment {
        IMAGE_NAME = 'todo-api'
        CONTAINER_NAME = 'todo-api-jenkins'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis GitHub...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'üîß V√©rification de l\'environnement...'
                sh '''
                    echo "=== V√âRIFICATION DES OUTILS ==="
                    echo "Git version:"
                    git --version
                    echo "R√©pertoire de travail:"
                    pwd
                    echo "Contenu du r√©pertoire:"
                    ls -la
                    echo "=== FIN V√âRIFICATION ==="
                '''
            }
        }
        
        stage('Build Docker Image (External)') {
            steps {
                echo 'üê≥ Construction de l\'image Docker (externe)...'
                script {
                    sh '''
                        echo "Construction de l'image Docker depuis l'ext√©rieur..."
                        echo "Cette √©tape sera ex√©cut√©e manuellement apr√®s le pipeline"
                        echo "Commandes √† ex√©cuter:"
                        echo "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                        echo "docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest"
                    '''
                }
            }
        }
        
        stage('Run Docker Container (External)') {
            steps {
                echo 'üöÄ D√©marrage du conteneur Docker (externe)...'
                script {
                    sh '''
                        echo "D√©marrage du conteneur depuis l'ext√©rieur..."
                        echo "Cette √©tape sera ex√©cut√©e manuellement apr√®s le pipeline"
                        echo "Commandes √† ex√©cuter:"
                        echo "docker stop ${CONTAINER_NAME} || true"
                        echo "docker rm ${CONTAINER_NAME} || true"
                        echo "docker run -d --name ${CONTAINER_NAME} -p 3000:3000 ${IMAGE_NAME}:latest"
                    '''
                }
            }
        }
        
        stage('Health Check (External)') {
            steps {
                echo 'üè• V√©rification de la sant√© de l\'application (externe)...'
                script {
                    sh '''
                        echo "V√©rification de l'application..."
                        echo "Cette √©tape sera ex√©cut√©e manuellement apr√®s le pipeline"
                        echo "Commandes √† ex√©cuter:"
                        echo "curl -f http://localhost:3000/health"
                        echo "curl -f http://localhost:3000/tasks"
                    '''
                }
            }
        }
        
        stage('Show Instructions') {
            steps {
                echo 'üìã Instructions pour l\'ex√©cution manuelle...'
                script {
                    sh '''
                        echo "=== INSTRUCTIONS POUR L'EX√âCUTION MANUELLE ==="
                        echo "1. Construire l'image Docker:"
                        echo "   docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                        echo ""
                        echo "2. D√©marrer le conteneur:"
                        echo "   docker run -d --name ${CONTAINER_NAME} -p 3000:3000 ${IMAGE_NAME}:latest"
                        echo ""
                        echo "3. Tester l'application:"
                        echo "   curl http://localhost:3000/health"
                        echo "   curl http://localhost:3000/tasks"
                        echo ""
                        echo "4. Voir les logs:"
                        echo "   docker logs ${CONTAINER_NAME}"
                        echo ""
                        echo "5. Arr√™ter le conteneur:"
                        echo "   docker stop ${CONTAINER_NAME}"
                        echo "   docker rm ${CONTAINER_NAME}"
                        echo ""
                        echo "=== FIN INSTRUCTIONS ==="
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage des ressources...'
            sh '''
                echo "Nettoyage des ressources..."
                echo "Conteneur: ${CONTAINER_NAME}"
                echo "Image: ${IMAGE_NAME}:${BUILD_NUMBER}"
            '''
        }
        success {
            echo '‚úÖ Pipeline r√©ussi !'
            echo 'üìã Suivez les instructions ci-dessus pour ex√©cuter Docker manuellement'
            echo 'üåê Application sera disponible sur : http://localhost:3000'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
            echo 'üîç V√©rifiez les logs pour plus de d√©tails'
        }
    }
}
