pipeline {
    agent any
    
    environment {
        IMAGE_NAME = 'todo-api'
        CONTAINER_NAME = 'todo-api-jenkins'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis GitHub...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'üîß V√©rification de l\'environnement...'
                sh '''
                    echo "=== V√âRIFICATION DES OUTILS ==="
                    echo "Docker version:"
                    docker --version
                    echo "Git version:"
                    git --version
                    echo "R√©pertoire de travail:"
                    pwd
                    echo "Contenu du r√©pertoire:"
                    ls -la
                    echo "=== FIN V√âRIFICATION ==="
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                    sh "docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                echo 'üöÄ D√©marrage du conteneur Docker...'
                script {
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"
                    sh "docker run -d --name ${CONTAINER_NAME} -p 3000:3000 ${IMAGE_NAME}:latest"
                    echo "Conteneur d√©marr√© sur http://localhost:3000"
                }
            }
        }
        
        stage('Wait for Application') {
            steps {
                echo '‚è≥ Attente du d√©marrage de l\'application...'
                sh '''
                    echo "Attente de 15 secondes pour le d√©marrage..."
                    sleep 15
                    echo "V√©rification du statut du conteneur:"
                    docker ps | grep ${CONTAINER_NAME} || echo "Conteneur non trouv√©"
                '''
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üè• V√©rification de la sant√© de l\'application...'
                script {
                    sh '''
                        echo "Test de l'endpoint health..."
                        curl -f http://localhost:3000/health || echo "Health check √©chou√© - application non accessible"
                        
                        echo "Test de l'API tasks..."
                        curl -f http://localhost:3000/tasks || echo "API tasks √©chou√©"
                        
                        echo "Test de cr√©ation d'une t√¢che..."
                        curl -X POST http://localhost:3000/tasks \
                             -H "Content-Type: application/json" \
                             -d '{"task":"Test Jenkins Docker","priority":"high","category":"Jenkins"}' \
                             || echo "Cr√©ation de t√¢che √©chou√©e"
                    '''
                }
            }
        }
        
        stage('Show Results') {
            steps {
                echo 'üìä Affichage des r√©sultats...'
                script {
                    sh '''
                        echo "=== R√âSULTATS DU D√âPLOIEMENT ==="
                        echo "Conteneur en cours d'ex√©cution:"
                        docker ps | grep ${CONTAINER_NAME}
                        
                        echo "Logs du conteneur (derni√®res 10 lignes):"
                        docker logs --tail 10 ${CONTAINER_NAME} || echo "Logs non disponibles"
                        
                        echo "Taille de l'image Docker:"
                        docker images ${IMAGE_NAME} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
                        
                        echo "Test final de l'API:"
                        curl -s http://localhost:3000/health || echo "API non accessible"
                        
                        echo "=== FIN R√âSULTATS ==="
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage des ressources...'
            sh "docker stop ${CONTAINER_NAME} || true"
            sh "docker rm ${CONTAINER_NAME} || true"
        }
        success {
            echo '‚úÖ Pipeline r√©ussi !'
            echo 'üåê Application disponible sur : http://localhost:3000'
            echo 'üê≥ Image Docker construite et test√©e'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
            echo 'üîç V√©rifiez les logs pour plus de d√©tails'
        }
    }
}
