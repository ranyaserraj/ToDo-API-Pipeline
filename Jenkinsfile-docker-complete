pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18'
        DOCKER_REGISTRY = 'localhost:5000'
        IMAGE_NAME = 'todo-api'
        CONTAINER_NAME = 'todo-api-jenkins'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis GitHub...'
                checkout scm
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'üîß Configuration de l\'environnement...'
                sh '''
                    echo "=== V√âRIFICATION DES OUTILS ==="
                    echo "Node.js version:"
                    node --version || echo "Node.js non install√© - installation..."
                    echo "NPM version:"
                    npm --version || echo "NPM non install√©"
                    echo "Docker version:"
                    docker --version
                    echo "Git version:"
                    git --version
                    echo "=== FIN V√âRIFICATION ==="
                '''
            }
        }
        
        stage('Install Node.js') {
            steps {
                echo 'üì¶ Installation de Node.js...'
                script {
                    sh '''
                        if ! command -v node &> /dev/null; then
                            echo "Installation de Node.js..."
                            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                            apt-get install -y nodejs
                        fi
                        node --version
                        npm --version
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances...'
                sh 'npm install'
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'üîç Analyse du code...'
                sh 'npm run lint || echo "Lint non configur√©, continuons..."'
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires...'
                sh 'npm run test:unit'
            }
        }

        stage('Integration Tests') {
            steps {
                echo 'üåê Ex√©cution des tests d\'int√©gration...'
                sh 'npm run test:integration'
            }
        }
        
        stage('Performance Tests (Heavy)') {
            steps {
                echo 'üî• Ex√©cution des tests de performance LOURDS...'
                sh 'npm run test:performance'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker LOURDE...'
                script {
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                    sh "docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest"
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'üì§ Push Docker image...'
                script {
                    sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} || echo 'Push √©chou√© - registry local'"
                    sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest || echo 'Push √©chou√© - registry local'"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                echo 'üöÄ D√©marrage du conteneur Docker...'
                script {
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"
                    sh "docker run -d --name ${CONTAINER_NAME} -p 3000:3000 ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest"
                    echo "Conteneur d√©marr√© sur http://localhost:3000"
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üè• V√©rification de la sant√© de l\'application...'
                script {
                    sh '''
                        echo "Attente du d√©marrage de l'application..."
                        sleep 10
                        echo "Test de l'endpoint health..."
                        curl -f http://localhost:3000/health || echo "Health check √©chou√©"
                        echo "Test de l'API tasks..."
                        curl -f http://localhost:3000/tasks || echo "API tasks √©chou√©"
                    '''
                }
            }
        }
        
        stage('API Tests') {
            steps {
                echo 'üß™ Tests de l\'API d√©ploy√©e...'
                script {
                    sh '''
                        echo "=== TESTS API D√âPLOY√âE ==="
                        echo "1. Test Health Check..."
                        curl -s http://localhost:3000/health | jq . || echo "Health check JSON parsing √©chou√©"
                        
                        echo "2. Test GET /tasks..."
                        curl -s http://localhost:3000/tasks | jq . || echo "GET /tasks √©chou√©"
                        
                        echo "3. Test POST /tasks..."
                        curl -s -X POST http://localhost:3000/tasks \
                             -H "Content-Type: application/json" \
                             -d '{"task":"Test Jenkins","priority":"high","category":"Jenkins"}' | jq . || echo "POST /tasks √©chou√©"
                        
                        echo "4. Test GET /stats..."
                        curl -s http://localhost:3000/stats | jq . || echo "GET /stats √©chou√©"
                        
                        echo "=== FIN TESTS API ==="
                    '''
                }
            }
        }
        
        stage('Performance Monitoring') {
            steps {
                echo 'üìä Monitoring des performances...'
                script {
                    sh '''
                        echo "=== MONITORING PERFORMANCE ==="
                        echo "M√©moire utilis√©e par le conteneur:"
                        docker stats --no-stream ${CONTAINER_NAME} || echo "Stats non disponibles"
                        
                        echo "Taille de l'image Docker:"
                        docker images ${IMAGE_NAME} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
                        
                        echo "Logs du conteneur (derni√®res 10 lignes):"
                        docker logs --tail 10 ${CONTAINER_NAME} || echo "Logs non disponibles"
                        
                        echo "=== FIN MONITORING ==="
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage des ressources...'
            sh "docker stop ${CONTAINER_NAME} || true"
            sh "docker rm ${CONTAINER_NAME} || true"
        }
        success {
            echo '‚úÖ Pipeline r√©ussi !'
            echo 'üåê Application disponible sur : http://localhost:3000'
            echo 'üìä Tests ex√©cut√©s avec succ√®s'
            echo 'üê≥ Image Docker construite et test√©e'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
            echo 'üîç V√©rifiez les logs pour plus de d√©tails'
        }
    }
}
