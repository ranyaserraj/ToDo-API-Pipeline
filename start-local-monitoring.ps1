# start-local-monitoring.ps1
# Script pour d√©marrer le syst√®me de monitoring local complet

Write-Host "D√âMARRAGE DU SYST√àME DE MONITORING LOCAL" -ForegroundColor Cyan
Write-Host ""

# 1. V√©rifier Docker
Write-Host "1. V√©rification de Docker..." -ForegroundColor Green
try {
    $dockerVersion = docker --version
    Write-Host "   ‚úÖ Docker: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Docker non trouv√©. Veuillez l'installer." -ForegroundColor Red
    exit 1
}

# 2. D√©marrer le syst√®me de monitoring complet
Write-Host "2. D√©marrage du syst√®me de monitoring local..." -ForegroundColor Green
Write-Host "   üìä Prometheus pour la collecte de m√©triques" -ForegroundColor White
Write-Host "   üìà Grafana pour la visualisation" -ForegroundColor White
Write-Host "   üê≥ Application ToDo API" -ForegroundColor White
Write-Host "   üìä Node Exporter pour les m√©triques syst√®me" -ForegroundColor White
Write-Host "   üê≥ cAdvisor pour les m√©triques Docker" -ForegroundColor White

docker-compose -f docker-compose-local-monitoring.yml up -d

if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Syst√®me de monitoring d√©marr√© avec succ√®s !" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Erreur lors du d√©marrage du syst√®me" -ForegroundColor Red
    exit 1
}

# 3. Attendre que les services d√©marrent
Write-Host "3. Attente du d√©marrage des services..." -ForegroundColor Green
Start-Sleep -Seconds 30

# 4. V√©rifier les services
Write-Host "4. V√©rification des services..." -ForegroundColor Green

# V√©rifier l'application ToDo API
try {
    $todoResponse = Invoke-WebRequest -Uri "http://localhost:3000/health" -UseBasicParsing -ErrorAction Stop
    if ($todoResponse.StatusCode -eq 200) {
        Write-Host "   ‚úÖ ToDo API: http://localhost:3000" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  ToDo API en cours de d√©marrage..." -ForegroundColor Yellow
}

# V√©rifier Prometheus
try {
    $prometheusResponse = Invoke-WebRequest -Uri "http://localhost:9090" -UseBasicParsing -ErrorAction Stop
    if ($prometheusResponse.StatusCode -eq 200) {
        Write-Host "   ‚úÖ Prometheus: http://localhost:9090" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Prometheus en cours de d√©marrage..." -ForegroundColor Yellow
}

# V√©rifier Grafana
try {
    $grafanaResponse = Invoke-WebRequest -Uri "http://localhost:3001" -UseBasicParsing -ErrorAction Stop
    if ($grafanaResponse.StatusCode -eq 200) {
        Write-Host "   ‚úÖ Grafana: http://localhost:3001" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Grafana en cours de d√©marrage..." -ForegroundColor Yellow
}

# 5. Collecter les m√©triques locales
Write-Host "5. Collecte des m√©triques locales d'empreinte carbone..." -ForegroundColor Green
node local-metrics-collector.js

# 6. Afficher les informations d'acc√®s
Write-Host ""
Write-Host "SYST√àME DE MONITORING LOCAL D√âMARR√â !" -ForegroundColor Magenta
Write-Host ""
Write-Host "ACC√àS AUX SERVICES :" -ForegroundColor Yellow
Write-Host "   üåê ToDo API: http://localhost:3000" -ForegroundColor White
Write-Host "   üìä Prometheus: http://localhost:9090" -ForegroundColor White
Write-Host "   üìà Grafana: http://localhost:3001" -ForegroundColor White
Write-Host "   üìä Node Exporter: http://localhost:9100" -ForegroundColor White
Write-Host "   üê≥ cAdvisor: http://localhost:8081" -ForegroundColor White
Write-Host ""
Write-Host "CONNEXION GRAFANA :" -ForegroundColor Yellow
Write-Host "   üë§ Utilisateur: admin" -ForegroundColor White
Write-Host "   üîë Mot de passe: admin123" -ForegroundColor White
Write-Host ""
Write-Host "M√âTRIQUES D'EMPREINTE CARBONE :" -ForegroundColor Yellow
Write-Host "   üìä M√©triques Prometheus: http://localhost:3000/metrics" -ForegroundColor White
Write-Host "   üå± M√©triques carbone: http://localhost:3000/carbon-metrics" -ForegroundColor White
Write-Host ""
Write-Host "CONFIGURATION GRAFANA :" -ForegroundColor Yellow
Write-Host "   1. Acc√©dez √† Grafana: http://localhost:3001" -ForegroundColor White
Write-Host "   2. Ajoutez Prometheus comme source de donn√©es" -ForegroundColor White
Write-Host "   3. URL Prometheus: http://prometheus:9090" -ForegroundColor White
Write-Host "   4. Cr√©ez un dashboard avec les m√©triques d'empreinte carbone" -ForegroundColor White

# 7. Ouvrir les services
Write-Host ""
Write-Host "OUVERTURE DES SERVICES :" -ForegroundColor Yellow
try {
    Start-Process "http://localhost:3000"  # ToDo API
    Start-Sleep -Seconds 2
    Start-Process "http://localhost:3001"  # Grafana
    Start-Sleep -Seconds 2
    Start-Process "http://localhost:9090" # Prometheus
    Write-Host "   Services ouverts dans le navigateur" -ForegroundColor Green
} catch {
    Write-Host "   Ouvrez manuellement les URLs ci-dessus" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "MONITORING LOCAL TERMIN√â !" -ForegroundColor Magenta
Write-Host "Votre syst√®me de monitoring local avec m√©triques d'empreinte carbone est op√©rationnel !" -ForegroundColor Magenta
