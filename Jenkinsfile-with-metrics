pipeline {
    agent any

    environment {
        NODE_VERSION = '18'
        IMAGE_NAME = 'todo-api'
        APP_PORT = '3000'
        METRICS_COLLECTOR = 'collect-real-metrics.js'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source...'
                git branch: 'main', credentialsId: 'github-credentials', url: 'https://github.com/ranyaserraj/ToDo-API-Pipeline.git'
            }
        }

        stage('Setup Environment') {
            steps {
                echo 'üîß Configuration de l\'environnement...'
                sh '''
                    echo "Node.js version:"
                    node --version
                    echo "NPM version:"
                    npm --version
                    echo "Docker version:"
                    docker --version
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances...'
                sh 'npm install'
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires...'
                sh 'npm run test:unit'
            }
        }

        stage('Integration Tests') {
            steps {
                echo 'üåê Ex√©cution des tests d\'int√©gration...'
                sh 'npm run test:integration'
            }
        }

        stage('Performance Tests (Heavy)') {
            steps {
                echo 'üî• Ex√©cution des tests de performance LOURDS...'
                sh 'npm run test:performance'
            }
        }

        stage('Collect Real Metrics') {
            steps {
                echo 'üìä Collecte des m√©triques r√©elles d\'empreinte carbone...'
                script {
                    // D√©marrer la collecte des m√©triques en arri√®re-plan
                    sh "node ${METRICS_COLLECTOR} &"
                    
                    // Attendre un peu pour la collecte
                    sh "sleep 5"
                    
                    // V√©rifier que le rapport a √©t√© g√©n√©r√©
                    sh "ls -la real-metrics-report.json"
                    
                    echo "M√©triques collect√©es avec succ√®s !"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                    sh "docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo 'üöÄ D√©marrage du conteneur Docker...'
                script {
                    sh "docker stop ${IMAGE_NAME}-jenkins || true"
                    sh "docker rm ${IMAGE_NAME}-jenkins || true"
                    sh "docker run -d --name ${IMAGE_NAME}-jenkins -p ${APP_PORT}:${APP_PORT} ${IMAGE_NAME}:latest"
                    echo "Conteneur d√©marr√© sur http://localhost:${APP_PORT}"
                }
            }
        }

        stage('Health Check & API Tests') {
            steps {
                echo 'üíñ V√©rification de la sant√© de l\'application...'
                script {
                    sh "sleep 10"
                    sh "curl -s http://localhost:${APP_PORT}/health | grep 'API ToDo est op√©rationnelle'"
                    sh "curl -s http://localhost:${APP_PORT}/tasks | grep 'success'"
                    echo "Application Docker d√©ploy√©e et API test√©e avec succ√®s !"
                }
            }
        }

        stage('Update Grafana Dashboard') {
            steps {
                echo 'üìà Mise √† jour du dashboard Grafana avec les m√©triques r√©elles...'
                script {
                    // V√©rifier que le rapport de m√©triques existe
                    sh "test -f real-metrics-report.json"
                    
                    // Copier les m√©triques vers Grafana
                    sh "cp real-metrics-report.json grafana-metrics.json"
                    
                    // Mettre √† jour le dashboard avec les vraies valeurs
                    sh "node update-grafana-dashboard.js"
                    
                    echo "Dashboard Grafana mis √† jour avec les m√©triques r√©elles !"
                }
            }
        }
    }

    post {
        always {
            echo 'Nettoyage des ressources...'
            sh "docker stop ${IMAGE_NAME}-jenkins || true"
            sh "docker rm ${IMAGE_NAME}-jenkins || true"
        }
        success {
            echo 'Pipeline r√©ussi avec m√©triques d\'empreinte carbone collect√©es !'
        }
        failure {
            echo 'Pipeline √©chou√© !'
        }
    }
}
