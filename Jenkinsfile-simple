pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18'
        DOCKER_IMAGE = 'todo-api-heavy'
        CONTAINER = 'todo-container'
        REPORT_FILE = 'performance-report.json'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS') // Pipeline peut prendre jusqu'√† 1h
        retry(2) // Retry en cas d'√©chec
        timestamps() // Timestamps sur tous les logs
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source...'
                checkout scm
            }
        }
        
        stage('Setup Node.js') {
            steps {
                echo 'üîß Configuration de Node.js...'
                sh '''
                    echo "üì¶ Versions install√©es:"
                    node --version
                    npm --version
                    
                    echo "üîß Configuration npm pour tests lourds:"
                    npm config set fund false
                    npm config set audit false
                    npm config set progress false
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances LOURDES...'
                script {
                    def startTime = System.currentTimeMillis()
                    sh '''
                        # Installation avec m√©triques d√©taill√©es
                        npm install --verbose --timing --loglevel=verbose
                        
                        # V√©rification des d√©pendances install√©es
                        npm list --depth=0
                        
                        # Analyse de la taille des node_modules
                        du -sh node_modules/
                        find node_modules/ -name "*.js" | wc -l
                    '''
                    def endTime = System.currentTimeMillis()
                    def installTime = (endTime - startTime) / 1000
                    env.INSTALL_TIME = installTime.toString()
                    echo "‚è±Ô∏è Temps d'installation: ${installTime}s"
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Standard Tests') {
                    steps {
                        echo 'üß™ Ex√©cution des tests standards...'
                        sh '''
                            export NODE_OPTIONS="--max-old-space-size=4096"
                            npm test
                        '''
                    }
                }
                
                stage('Heavy Tests') {
                    steps {
                        echo 'üî• Ex√©cution des tests LOURDS de performance...'
                        sh '''
                            export NODE_OPTIONS="--max-old-space-size=4096"
                            npm run test:heavy || echo "Tests lourds √©chou√©s - continuons"
                        '''
                    }
                }
            }
            post {
                always {
                    // Publication des r√©sultats
                    publishTestResults testResultsPattern: 'coverage/heavy-junit.xml'
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage',
                        reportFiles: 'heavy-test-report.html',
                        reportName: 'Heavy Test Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker LOURDE...'
                script {
                    def startTime = System.currentTimeMillis()
                    sh """
                        echo "üî® Construction avec m√©triques d√©taill√©es..."
                        docker build -t ${DOCKER_IMAGE} . --no-cache --progress=plain
                        
                        echo "üìä Analyse de l'image construite..."
                        docker history ${DOCKER_IMAGE}
                        docker inspect ${DOCKER_IMAGE} | jq '.[0].Size' || echo "jq non disponible"
                    """
                    def endTime = System.currentTimeMillis()
                    def buildTime = (endTime - startTime) / 1000
                    env.BUILD_TIME = buildTime.toString()
                    echo "‚è±Ô∏è Temps de construction: ${buildTime}s"
                }
            }
        }
        
        stage('Docker Analysis') {
            steps {
                echo 'üìä Analyse de l\'image Docker...'
                script {
                    sh """
                        echo "üîç Analyse d√©taill√©e de l'image..."
                        
                        # Taille d√©taill√©e
                        docker images ${DOCKER_IMAGE} --format 'table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\\t{{.CreatedAt}}'
                        
                        # Analyse des couches
                        echo "üìã Analyse des couches:"
                        docker history ${DOCKER_IMAGE} --format 'table {{.CreatedBy}}\\t{{.Size}}'
                    """
                    
                    // Capture des m√©triques
                    def imageSize = sh(
                        script: "docker images ${DOCKER_IMAGE} --format '{{.Size}}'",
                        returnStdout: true
                    ).trim()
                    
                    def layers = sh(
                        script: "docker history ${DOCKER_IMAGE} | wc -l",
                        returnStdout: true
                    ).trim()
                    
                    env.IMAGE_SIZE = imageSize
                    env.LAYERS = layers
                    
                    echo "üìè Taille image LOURDE: ${imageSize} (${layers} couches)"
                }
            }
        }
        
        stage('Performance Test') {
            steps {
                echo 'üíÄ Test de performance de l\'image...'
                script {
                    sh """
                        echo "üöÄ D√©marrage du conteneur avec limites..."
                        docker run -d --name ${CONTAINER} \
                            --memory=2g \
                            --cpus=2 \
                            -p 3000:3000 \
                            ${DOCKER_IMAGE}
                        
                        echo "‚è≥ Attente du d√©marrage..."
                        sleep 15
                        
                        echo "üî• Test de sant√© initial..."
                        curl -f http://localhost:3000/health || exit 1
                    """
                    
                    // Test de charge
                    def startTime = System.currentTimeMillis()
                    sh """
                        echo "üí• D√âBUT DU TEST DE PERFORMANCE..."
                        
                        # Test avec 500 requ√™tes
                        for i in \$(seq 1 500); do
                            curl -s http://localhost:3000/health > /dev/null &
                            if [ \$((\$i % 50)) -eq 0 ]; then
                                echo "Requ√™tes envoy√©es: \$i/500"
                                wait # Attendre les 50 derni√®res requ√™tes
                            fi
                        done
                        wait # Attendre toutes les requ√™tes restantes
                        
                        echo "‚úÖ Test de performance termin√©"
                    """
                    def endTime = System.currentTimeMillis()
                    def responseTime = (endTime - startTime) / 500
                    env.RESPONSE_TIME = responseTime.toString()
                    
                    // Monitoring des ressources
                    sh """
                        echo "üìä Statistiques du conteneur:"
                        docker stats ${CONTAINER} --no-stream
                        
                        echo "üìã Logs du conteneur (derni√®res 20 lignes):"
                        docker logs --tail 20 ${CONTAINER}
                    """
                    
                    sh "docker stop ${CONTAINER} && docker rm ${CONTAINER}"
                    echo "‚è±Ô∏è Temps de r√©ponse moyen: ${responseTime}ms"
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                echo 'üìã G√©n√©ration du rapport de performance...'
                script {
                    def report = [
                        timestamp: new Date().format("yyyy-MM-dd HH:mm:ss"),
                        installation: [
                            time: env.INSTALL_TIME
                        ],
                        build: [
                            time: env.BUILD_TIME,
                            imageSize: env.IMAGE_SIZE,
                            layers: env.LAYERS
                        ],
                        performance: [
                            responseTime: env.RESPONSE_TIME
                        ]
                    ]
                    
                    writeJSON file: env.REPORT_FILE, json: report
                    
                    echo """
                    üìä RAPPORT DE PERFORMANCE DOCKER LOURD:
                    ======================================
                    
                    üì¶ INSTALLATION:
                    ‚Ä¢ Temps d'installation: ${env.INSTALL_TIME}s
                    
                    üèóÔ∏è  CONSTRUCTION:
                    ‚Ä¢ Temps de construction: ${env.BUILD_TIME}s
                    ‚Ä¢ Taille de l'image: ${env.IMAGE_SIZE}
                    ‚Ä¢ Nombre de couches: ${env.LAYERS}
                    
                    ‚ö° PERFORMANCE:
                    ‚Ä¢ Temps de r√©ponse moyen: ${env.RESPONSE_TIME}ms
                    
                    ======================================
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo 'üßπ Nettoyage des ressources...'
                sh '''
                    echo "üóëÔ∏è Suppression de l'image..."
                    docker rmi ${DOCKER_IMAGE} || true
                    
                    echo "üßπ Nettoyage syst√®me Docker..."
                    docker system prune -f
                    
                    echo "üíæ Espace disque apr√®s nettoyage:"
                    df -h
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üìä Archivage des rapports...'
            archiveArtifacts artifacts: "${REPORT_FILE},coverage/**/*", fingerprint: true
            
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: "${REPORT_FILE}",
                reportName: 'Performance Report'
            ])
        }
        
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s!'
            echo """
            üéâ R√âSUM√â DU PIPELINE:
            ‚Ä¢ Tests standards: ‚úÖ
            ‚Ä¢ Tests lourds: ‚úÖ
            ‚Ä¢ Construction Docker: ‚úÖ
            ‚Ä¢ Test de performance: ‚úÖ
            ‚Ä¢ Rapports g√©n√©r√©s: ‚úÖ
            """
        }
        
        failure {
            echo '‚ùå Pipeline √©chou√©!'
            echo """
            üíÄ √âCHEC DU PIPELINE:
            ‚Ä¢ V√©rifiez les logs d√©taill√©s
            ‚Ä¢ Ressources syst√®me insuffisantes?
            ‚Ä¢ Timeouts d√©pass√©s?
            """
        }
        
        cleanup {
            echo 'üßπ Nettoyage final...'
            sh '''
                # Arr√™t forc√© du conteneur
                docker stop ${CONTAINER} || true
                docker rm ${CONTAINER} || true
                
                # Nettoyage des images orphelines
                docker image prune -f
                
                echo "üéØ Nettoyage termin√©"
            '''
        }
    }
}
