pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18'
        IMAGE_NAME = 'todo-api'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis GitHub...'
                checkout scm
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'üîß Configuration de l\'environnement...'
                sh '''
                    echo "Node.js version:"
                    node --version || echo "Node.js non install√©"
                    echo "NPM version:"
                    npm --version || echo "NPM non install√©"
                    echo "Git version:"
                    git --version
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances...'
                sh 'npm install'
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires...'
                sh 'npm run test:unit'
            }
        }

        stage('Integration Tests') {
            steps {
                echo 'üåê Ex√©cution des tests d\'int√©gration...'
                sh 'npm run test:integration'
            }
        }
        
        stage('Performance Tests (Heavy)') {
            steps {
                echo 'üî• Ex√©cution des tests de performance LOURDS...'
                sh 'npm run test:performance'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                    sh "docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                echo 'üöÄ D√©marrage du conteneur Docker...'
                script {
                    sh "docker stop ${IMAGE_NAME}-jenkins || true"
                    sh "docker rm ${IMAGE_NAME}-jenkins || true"
                    sh "docker run -d --name ${IMAGE_NAME}-jenkins -p 3000:3000 ${IMAGE_NAME}:latest"
                    echo "Conteneur d√©marr√© sur http://localhost:3000"
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üè• V√©rification de la sant√© de l\'application...'
                script {
                    sh '''
                        sleep 5
                        curl -f http://localhost:3000/health || echo "Health check √©chou√©"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage des ressources...'
            sh "docker stop ${IMAGE_NAME}-jenkins || true"
            sh "docker rm ${IMAGE_NAME}-jenkins || true"
        }
        success {
            echo '‚úÖ Pipeline r√©ussi !'
            echo 'üåê Application disponible sur : http://localhost:3000'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
        }
    }
}
